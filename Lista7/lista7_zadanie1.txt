START	LDA #40		; A = 40
    	LDX #20		; X = 20
	    JSR MULU    ; skok do MULU
	    BRK	        ; zakoncz
MULU	EOR #$FF	; A XOR FF
	    STA BTA		; *BTA = A
	    STX BTB     ; *BTB = X
	    LDX #0	    ; X = 0
	    STX BTB+1   ; *(BTB+1) = X
	    STX RSL	    ; *RSL = X
	    STX RSL+1   ; *(RSL+1) = X
	    LDX #8	    ; X = 8;
MUL_LOP	LSR BTA		; przesuniecie bitowe w prawo, C = bit 0
	    BCS MUL_NXT ; skok do MUL_NXT gdy C = 1
	    LDA BTB	    ; A = *BTB
	    ADC RSL	    ; A = *RSL + A + C
	    STA RSL	    ; *RSL = A
	    LDA BTB+1   ; A = *(BTB+1)
	    ADC RSL+1   ; A = A + *(RSL+1) + C
	    STA RSL+1   ; *(RSL+1) = A
MUL_NXT ASL BTB		; przesuniecie bitowe w lewo, C = bit 7
	    ROL BTB+1	; przesuniecie bitowe w lewo, bit 0 = C, C = bit 7
	    DEX		    ; X--
	    BNE MUL_LOP	; skok do MUL_LOP gdy Z = 0
	    LDA RSL		; A = *(RLS)
	    LDX RSL+1	; X = *(RLS+1)
	    RTS	    	; wroc
BTA	    DTA B(0)	; wartosc typu byte, 1 bajt
BTB	    DTA A(0)	; wartosc typu word, 2 bajty
RSL	    DTA A(0)	; wartosc typu word, 2 bajty
	
